package main

import (
 "fmt"
 "math"
)

func main() {
 var W, I, f, T, D, R, r, m, ma, y, E, bt, H float64
 const N = 2
 const e = 2.71
 fmt.Println("Введите данные : ")
 fmt.Println("__________________________________________________________________________________________")
 fmt.Print("Количество витков : ")
 _, err := fmt.Scan(&W)

 fmt.Print("Сила тока в катушке : ")
 _, err = fmt.Scan(&I)

 fmt.Print("Частота (10^8): ")
 _, err = fmt.Scan(&f)

 f *= math.Pow10(8)
 fmt.Print("Время облучения (в часах): ")
 _, err = fmt.Scan(&T)

 fmt.Print("Диаметр (10^-2) : ")
 _, err = fmt.Scan(&D)

 D *= math.Pow10(-2)
 fmt.Print("Расстояние : ")
 _, err = fmt.Scan(&R)

 fmt.Print("Расстояние от источника ЭМИ : ")
 _, err = fmt.Scan(&r)

 r *= math.Pow10(-1)
 fmt.Print("Относительная магнитная проницаемость среды : ")
 _, err = fmt.Scan(&m)

 fmt.Print("Абсолютная магнитная проницаемость (10^-4 или 10^-6) : ")
 _, err = fmt.Scan(&ma)

 if ma == 2.5 {
  ma *= math.Pow10(-4)
 } else if ma == 1.2 {
  ma *= math.Pow10(-6)
 }
 fmt.Print("Электрическая проводимость (10^7): ")
 _, err = fmt.Scan(&y)

 y *= math.Pow10(7)
 fmt.Print("Относительная диэлектрическая постоянная стержня : ")
 _, err = fmt.Scan(&E)

 fmt.Println("__________________________________________________________________________________________")

 if R/r > 10 {
  bt = 1
  fmt.Println("Коэффициент соотношением R/r : ", bt)
  H = ((W * I * math.Pow(r, 2)) / (4 * math.Pow(R, 3))) * bt
  fmt.Printf("Напряжённость магнитной составляющей поля катушки : %.10f A/м\n", H)
 } else {
  bt = R / r
  H = ((W * I * math.Pow(r, 2)) / (4 * math.Pow(R, 3))) * bt
  fmt.Printf("Напряжённость магнитной составляющей поля катушки : %.10f A/м\n", H)
 }

 p := (337 * math.Pow(H, 2)) / 2
 fmt.Printf("Плотность потока энергии (ППЭ): %.10f Вт/м^2\n ", p)

 pd := N / T
 fmt.Printf("Допустимая величина ППЭ : %.10f Вт/м^2\n", pd)

 L := p / pd
 fmt.Printf("Ослабление электромагнитного поля : %.10f\n", L)

 w := 2 * math.Pi * f
 fmt.Printf("Угловая частота : %.10f Гц\n", w)

 M := (Log(e, L)) / (2 * math.Sqrt((w*ma*y)/2))
 fmt.Printf("Толщина экрана : %.10f м\n", M)

 a := 32 / (D * math.Sqrt(E))
 fmt.Printf("Ослабление энергии : %.10f дБ/м\n ", a)

 l := (10 * math.Log10(L)) / a
 fmt.Printf("Требуемая длина трубки : %.10f м\n", l)
 fmt.Println("__________________________________________________________________________________________")
 switch {
  case f <= 30e3:
   fmt.Println("Название : Радиоволны\t |Сверхдлинные\t |Длина волны : более 10км\t |Источники: Атмосферные и магнитосферные явления. Радиосвязь.")
  case f > 30e3 && f <= 300e3:
   fmt.Println("Название : Радиоволны\t |Длинные\t |Длина волны : 10км - 1км\t |Источники: Атмосферные и магнитосферные явления. Радиосвязь.")
  case f > 300e3 && f <= 3e6:
   fmt.Println("Название : Радиоволны\t |Средние\t |Длина волны : 1км - 100м\t |Источники: Атмосферные и магнитосферные явления. Радиосвязь.")
  case f > 3e6 && f <= 30e6:
   fmt.Println("Название : Радиоволны\t |Короткие\t |Длина волны : 100м - 10м\t |Источники: Атмосферные и магнитосферные явления. Радиосвязь.")
  case f > 30e6 && f <= 300e9:
   fmt.Println("Название : Радиоволны\t |Ультракороткие\t |Длина волны : 10м - 1мм\t |Источники: Атмосферные и магнитосферные явления. Радиосвязь.")
  case f > 300e9 && f <= 429e12:
   fmt.Println("Название : Инфракрасное излучение\t |Длина волны : 1мкм - 780нм\t |Источники: Излучение молекул и атомов при тепловых и электрических вохдействиях.")
  case f > 429e12 && f <= 750e12:
   fmt.Println("Название : Видимое излучение\t |Длина волны : 780нм - 380нм\t |Источники: Излучение молекул и атомов при тепловых и электрических вохдействиях.")
  case f > 7.5e14 && f <= 3e16:
   fmt.Println("Название : Ультрафиолетовые\t |Длина волны : 380нм - 10нм\t |Источники: Излучение атомов под воздействием ускоренных электронов.")
  case f > 3e16 && f <= 6e19:
   fmt.Println("Название : Рентгеновское\t ")
  case f > 6e19:
   fmt.Println("Название : Гамма\t |Длина волны : менее 5пм\t |Источники: Ядерные и космические процессы, радиоактивный распад.")
  }
 }

 func Log(base, x float64) float64 {
  return math.Log(x) / math.Log(base)
 }